Istanbul BFT algorithm


Consensus
Istanbul BFT is inspired by Castro-Liskov 99 paper. However, the original PBFT needed quite a bit of tweaking to make it 
work with blockchain. First off, there is no specific "client" which sends out requests and waits for the results. 
Instead, all of the validators can be seen as clients. Furthermore, to keep the blockchain progressing, a proposer will be 
continuously selected in each round to create block proposal for consensus. Also, for each consensus result, we expect to
generate a verifiable new block rather than a bunch of read/write operations to the file system.

Istanbul BFT inherits from the original PBFT by using 3-phase consensus, PRE-PREPARE, PREPARE, and COMMIT. 
The system can tolerate at most of F faulty nodes in a N validator nodes network, where N = 3F + 1. 
Before each round, the validators will pick one of them as the proposer, by default, in a round robin fashion. 
The proposer will then propose a new block proposal and broadcast it along with the PRE-PREPARE message. Upon receiving the 
PRE-PREPARE message from the proposer, validators enter the state of PRE-PREPARED and then broadcast PREPARE message. 
This step is to make sure all validators are working on the same sequence and the same round. While receiving 2F + 1 of 
PREPARE messages, the validator enters the state of PREPARED and then broadcasts COMMIT message. This step is to inform 
its peers that it accepts the proposed block and is going to insert the block to the chain. Lastly, validators wait 
for 2F + 1 of COMMIT messages to enter COMMITTED state and then insert the block to the chain.

Blocks in Istanbul BFT protocol are final, which means that there are no forks and any valid block must be somewhere 
in the main chain. To prevent a faulty node from generating a totally different chain from the main chain, 
each validator appends 2F + 1 received COMMIT signatures to extraData field in the header before inserting it into the chain.
Thus blocks are self-verifiable and light client can be supported as well. However, the dynamic extraData would cause an
issue on block hash calculation. Since the same block from different validators can have different set of COMMIT signatures, 
the same block can have different block hashes as well. To solve this, we calculate the block hash by excluding the COMMIT
signatures part. Therefore, we can still keep the block/block hash consistency as well as put the consensus proof in the block
header.
